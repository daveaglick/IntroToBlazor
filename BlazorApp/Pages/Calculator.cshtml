@page "/calc"
@page "/calculator"

<h1>Calculator</h1>

<div class="row">
    <div class="col-md-4">
        <p>
            <input class="form-control" bind="@Input" />
        </p>                
                
        @if(!string.IsNullOrEmpty(Error))
        {
            <p class="text-danger">@Error</p>
        }

        <p>
            @if(a == null)
            {
                <button class="btn btn-primary" onclick="@Add">+</button>    
                <button class="btn btn-primary" onclick="@Subtract">-</button>
                <button class="btn btn-primary" disabled>=</button>
            }
            else
            {
                <button class="btn btn-primary" disabled>+</button>    
                <button class="btn btn-primary" disabled>-</button>
                <button class="btn btn-primary" onclick="@Calculate">=</button>
            }
        </p>

        <p>
            <input class="form-control" readonly bind="@Result" />
        </p>

        <p>
            A: @a<br/>
            Operation: @Operation<br/>
            B: @b<br/>
        </p>
    </div>
</div>

@functions {
    public enum Oper
    {
        None, Add, Subtract
    }

    public string Input { get; set; }
    public Oper Operation { get; set; } = Oper.None;
    public string Result { get; set; }
    public string Error { get; set; }
    
    private int? a = null;
    private int? b = null;

    public void Add()
    {
        if(DataInput())
        {
            Operation = Oper.Add;
        }
    }

    public void Subtract()
    {
        if(DataInput())
        {
            Operation = Oper.Subtract;
        }
    }
        
    // Set a or b based on which one has been previously set
    public bool DataInput()
    {
        if(string.IsNullOrEmpty(Input))
        {
            return false;
        }
        try
        {
            if(a == null)
            {
                a = Int32.Parse(Input);
            }
            else
            {
                b = Int32.Parse(Input);
            }            
        }
        catch (System.Exception ex)
        {
            Error = ex.Message;
            return false;
        }
        Input = string.Empty;  // Can't use null, won't pick up the state change
        Result = string.Empty;
        Error = string.Empty;
        return true;
    }
    
    public void Calculate()
    {        
        if(DataInput())
        {
            switch(Operation)
            {
                case Oper.Add:
                    Result = (a.Value + b.Value).ToString();
                    break;
                case Oper.Subtract:
                    Result = (a.Value - b.Value).ToString();
                    break;
            }
            a = null;
            b = null;
            Operation = Oper.None;
        }
    }
}